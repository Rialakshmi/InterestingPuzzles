/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if(root==null)
            return null;
        Queue<Node> queue=new LinkedList<>();
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            
            int size=queue.size();
            Queue<Node> levelList=new LinkedList<>();
            while(size>0) {
                Node curr=queue.poll();
                levelList.add(curr);
                if(curr.left!=null)
                    queue.offer(curr.left);
                if(curr.right!=null)
                    queue.offer(curr.right);
                size--;
            }
            Node curr=levelList.poll();
            while(!levelList.isEmpty()) {
                curr.next=levelList.peek();
                curr=levelList.poll();
            }
            curr.next=null;
        }
        
        return root;
    }
}
