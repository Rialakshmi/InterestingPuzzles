/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> list=new ArrayList<>();
        
        if(root==null)
            return list;
        
        Queue<Node> queue=new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()) {
            List<Integer> levelList=new ArrayList<>();
            int size=queue.size();
            while(size>0) {
                Node curr=queue.poll();
                levelList.add(curr.val);
                List<Node> children=curr.children;
                while(!children.isEmpty()) {
                    queue.offer(children.remove(0));
                }
                size--;
            }
            
            list.add(levelList);
        }
        
        return list;
    }
}
